use crate::ast::*;

grammar;

pub Program: Program = {
    (<Stmt> ";")* => Program { statements: <> },
};

Stmt: Statement = {
    <start: @L> "var" <variable_name:Ident> <initializer:("=" <Expr>)?> <end: @R> => {
        Statement::VarDecl(VarDeclStmt {
            variable_name,
            initializer,
            span: InputSpan { start, end },
        })
    },

    <start: @L> "read" <variable_name:Ident> <end: @R> => {
        Statement::Read(ReadStmt {
            variable_name,
            span: InputSpan { start, end },
        })
    },

    <start: @L> "write" <expression:Expr> <end: @R> => {
        Statement::Write(WriteStmt {
            expression,
            span: InputSpan { start, end },
        })
    },
};

// Expressions are ordered from lowest to highest precedence.
Expr: Expression = {
    <Expr1> => <>,
};

Expr1: Expression = {
    <start: @L> <lhs:Expr1> "+" <rhs:Expr0> <end: @R> => {
        Expression::Add(AddExpr {
            lhs: Box::new(lhs),
            rhs: Box::new(rhs),
            span: InputSpan { start, end },
        })
    },
    <Expr0> => <>,
};

Expr0: Expression = {
    <start: @L> <name:Ident> <end: @R> => {
        Expression::Variable(VariableExpr {
            name,
            span: InputSpan { start, end },
        })
    },

    <start: @L> <value:IntLiteral> <end: @R> => {
        Expression::IntLiteral(IntLiteralExpr {
            value,
            span: InputSpan { start, end },
        })
    },
}

Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => String::from(<>)
};

IntLiteral: i32 = {
    r"-?[0-9]+" => <>.parse().unwrap(),
};
