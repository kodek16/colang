use crate::ast::*;
use crate::source::{InputSpan, InputSpanFile};

grammar(file: InputSpanFile);

pub Program: Program = {
    <program:Program?> <struct_:StructDef> => {
        let mut program = program.unwrap_or(Program::new());
        program.structs.push(struct_);
        program
    },
    <program:Program?> <trait_:TraitDef> => {
        let mut program = program.unwrap_or(Program::new());
        program.traits.push(trait_);
        program
    },
    <program:Program?> <function:FunctionDef> => {
        let mut program = program.unwrap_or(Program::new());
        program.functions.push(function);
        program
    },
};

FunctionDef: FunctionDef = {
    <start:@L> KwFun <name:Ident> "(" <parameters:CommaSeparated<ParameterDef>> ")" <return_type:(":" <TypeExpr>)?> <end:@R> <body:Block?> => {
        FunctionDef {
            name,
            parameters,
            return_type,
            body: body.map(ExpressionLike::Block),
            signature_span: InputSpan { file, start, end }
        }
    },
};

ParameterDef: Parameter = {
    NormalParameterDef,
    SelfParameterDef,
};

NormalParameterDef: Parameter = {
    <start: @L> <name:Ident> ":" <type_:TypeExpr> <end: @R> => {
        Parameter::Normal(NormalParameter {
            name,
            type_,
            span: InputSpan { file, start, end },
        })
    },
};

SelfParameterDef: Parameter = {
    <start:@L> KwSelf <end:@R> => {
        Parameter::Self_(SelfParameter {
            kind: SelfParameterKind::ByValue,
            span: InputSpan { file, start, end },
        })
    },

    <start:@L> "&" KwSelf <end:@R> => {
        Parameter::Self_(SelfParameter {
            kind: SelfParameterKind::ByPointer,
            span: InputSpan { file, start, end },
        })
    },
};

StructDef: TypeDef = {
    <start:@L> KwStruct <name:Ident> <type_parameters:("<" <CommaSeparatedNotEmpty<TypeParameter>> ">")?> <end:@R>
            <implemented_traits:(":" <CommaSeparatedNotEmpty<TypeExpr>>)?> "{" <members:TypeMember*> "}" => {
        TypeDef::new(
            name,
            type_parameters.unwrap_or(vec![]),
            implemented_traits.unwrap_or(vec![]),
            members,
            InputSpan { file, start, end },
        )
    },
};

TypeParameter: TypeParameter = {
    <start: @L> <name:Ident> <bounds:(":" <TypeParameterBounds>)?> <end: @R> => {
        TypeParameter {
            name,
            trait_bounds: bounds.unwrap_or(vec![]),
            span: InputSpan { file, start, end },
        }
    }
};

TypeParameterBounds: Vec<TypeExpr> = {
    <v:(<TypeExpr> "+")*> <e:TypeExpr> => {
        let mut v = v;
        v.push(e);
        v
    }
};

TraitDef: TypeDef = {
    <start:@L> KwTrait <name:Ident> <end:@R> "{" <members:TypeMember*> "}" => {
        TypeDef::new(
            name,
            vec![],
            vec![],
            members,
            InputSpan { file, start, end },
        )
    },
};

TypeMember: TypeMember = {
    FieldDef,
    MethodDef,
};

FieldDef: TypeMember = {
    <start:@L> <name:Ident> ":" <type_:TypeExpr> <end:@R> => {
        TypeMember::Field(FieldDef {
            name,
            type_,
            span: InputSpan { file, start, end },
        })
    },
};

MethodDef: TypeMember = {
    FunctionDef => TypeMember::Method(<>),
};

Stmt: StmtOrExpr = {
    StmtNotExpr,

    <start: @L> <expression:ExprWithBlock> <end: @R> => {
        StmtOrExpr::ExprLike(expression)
    },
}

// Somewhat ambiguously named, StmtNotExpr is a statement that was not trivially converted
// from an expression ending with block. If a semicolon was added to an expression, it can
// also be a StmtNotExpr.
StmtNotExpr: StmtOrExpr = {
    <start: @L> KwVar <entries:CommaSeparatedNotEmpty<VarDeclEntry>> ";" <end: @R> => {
        StmtOrExpr::VarDecl(VarDeclStmt {
            entries,
            span: InputSpan { file, start, end },
        })
    },

    <start: @L> KwRead <entries:CommaSeparatedNotEmpty<ReadEntry>> ";" <end: @R> => {
        StmtOrExpr::Read(ReadStmt {
            entries,
            whole_line: false,
            span: InputSpan { file, start, end },
        })
    },

    <start: @L> KwReadLn <entries:CommaSeparatedNotEmpty<ReadEntry>> ";" <end: @R> => {
        StmtOrExpr::Read(ReadStmt {
            entries,
            whole_line: true,
            span: InputSpan { file, start, end },
        })
    },

    <start: @L> KwWrite <expression:Expr> ";" <end: @R> => {
        StmtOrExpr::Write(WriteStmt {
            expression,
            newline: false,
            span: InputSpan { file, start, end },
        })
    },

    <start:@L> KwWriteLn <expression:Expr> ";" <end:@R> => {
        StmtOrExpr::Write(WriteStmt {
            expression,
            newline: true,
            span: InputSpan { file, start, end },
        })
    },

    <start: @L> KwWhile <cond:Expr> <body:Block> <end: @R> => {
        StmtOrExpr::While(WhileStmt {
            cond: Box::new(cond),
            body: Box::new(ExpressionLike::Block(body)),
            span: InputSpan { file, start, end },
        })
    },

    <start:@L> KwReturn <expression:Expr?> ";" <end:@R> => {
        StmtOrExpr::Return(ReturnStmt {
            expression,
            span: InputSpan { file, start, end },
        })
    },

    <start: @L> <lhs:Expr> "=" <rhs:Expr> ";" <end: @R> => {
        StmtOrExpr::Assign(AssignStmt {
            lhs: Box::new(lhs),
            rhs: Box::new(rhs),
            span: InputSpan { file, start, end },
        })
    },

    <start: @L> <expression:Expr> ";" <end: @R> => {
        StmtOrExpr::ExprLike(expression)
    },
};

VarDeclEntry: VarDeclEntry = {
    <start: @L> <name: Ident> <type_:(":" <TypeExpr>)?> <initializer:("=" <Expr>)?> <end: @R> => {
        VarDeclEntry {
            variable_name: name,
            variable_type: type_,
            initializer,
            span: InputSpan { file, start, end },
        }
    }
};

ReadEntry: ReadEntry = {
    <start:@L> <target:Expr> <end:@R> => {
        ReadEntry {
            target,
            span: InputSpan { file, start, end },
        }
    },
};

// Expressions are defined from lowest to highest precedence (Expr0 is highest).
// The top-level non-terminal structure handles the dangling-else problem.
// (https://en.wikipedia.org/wiki/Dangling_else).
//
// Duplicated XExpr/XExprWithBlock non-terminals are there to make en exception
// and allow expressions that end in a block to be converted to statements without
// a terminating semicolon.
Expr: ExpressionLike = {
    OpenIfExpr,
    ClosedExpr,
};

ExprWithBlock: ExpressionLike = {
    BlockExpr,
    IfExprWithBlock,
};

IfExprWithBlock: ExpressionLike = {
    OpenIfExprWithBlock,
    ClosedIfExprWithBlock,
};

OpenIfExpr: ExpressionLike = {
    <start: @L> KwIf "(" <cond:Expr> ")" <then:Expr> <end: @R> => {
        ExpressionLike::If(IfExpr {
            cond: Box::new(cond),
            then: Box::new(then),
            else_: None,
            span: InputSpan { file, start, end },
        })
    },
    <start: @L> KwIf "(" <cond:Expr> ")" <then:ClosedExpr> KwElse <else_:OpenIfExpr> <end: @R> => {
        ExpressionLike::If(IfExpr {
            cond: Box::new(cond),
            then: Box::new(then),
            else_: Some(Box::new(else_)),
            span: InputSpan { file, start, end },
        })
    },
};

OpenIfExprWithBlock: ExpressionLike = {
    <start: @L> KwIf "(" <cond:Expr> ")" <then:ExprWithBlock> <end: @R> => {
        ExpressionLike::If(IfExpr {
            cond: Box::new(cond),
            then: Box::new(then),
            else_: None,
            span: InputSpan { file, start, end },
        })
    },
    <start: @L> KwIf "(" <cond:Expr> ")" <then:ClosedExpr> KwElse <else_:OpenIfExprWithBlock> <end: @R> => {
        ExpressionLike::If(IfExpr {
            cond: Box::new(cond),
            then: Box::new(then),
            else_: Some(Box::new(else_)),
            span: InputSpan { file, start, end },
        })
    },
};

ClosedExpr: ExpressionLike = {
    NonIfExpr,
    ClosedIfExpr,
}

ClosedExprWithBlock: ExpressionLike = {
    NonIfExprWithBlock,
    ClosedIfExprWithBlock,
};

ClosedIfExpr: ExpressionLike = {
    <start: @L> KwIf "(" <cond:Expr> ")" <then:ClosedExpr> KwElse <else_:ClosedExpr> <end: @R> => {
        ExpressionLike::If(IfExpr {
            cond: Box::new(cond),
            then: Box::new(then),
            else_: Some(Box::new(else_)),
            span: InputSpan { file, start, end },
        })
    },
};

ClosedIfExprWithBlock: ExpressionLike = {
    <start: @L> KwIf "(" <cond:Expr> ")" <then:ClosedExpr> KwElse <else_:ClosedExprWithBlock> <end: @R> => {
        ExpressionLike::If(IfExpr {
            cond: Box::new(cond),
            then: Box::new(then),
            else_: Some(Box::new(else_)),
            span: InputSpan { file, start, end },
        })
    },
};

NonIfExpr: ExpressionLike = {
    BinaryOpExpr,
    BlockExpr,
    NewExpr,
};

NewExpr: ExpressionLike = {
    <start:@L> KwNew <target_type:TypeExpr> <end:@R> => {
        ExpressionLike::New(NewExpr {
            target_type,
            span: InputSpan { file, start, end },
        })
    },
};

NonIfExprWithBlock: ExpressionLike = {
    BlockExpr,
};

BlockExpr: ExpressionLike = {
    Block => ExpressionLike::Block(<>),
};

// Lowest precedence level.
BinaryOpExpr = Expr7;

Expr7 = LeftAssocBinaryOpExprTier<Expr7Op, Expr6>;
Expr7Op: BinaryOperator = {
    "&&" => BinaryOperator::LogicalAnd,
    "||" => BinaryOperator::LogicalOr,
};

Expr6 = LeftAssocBinaryOpExprTier<Expr6Op, Expr5>;
Expr6Op: BinaryOperator = {
    "==" => BinaryOperator::Eq,
    "!=" => BinaryOperator::NotEq,
}

Expr5: ExpressionLike = {
    IsExpr,
    Expr4,
};

IsExpr: ExpressionLike = {
    <start:@L> <lhs:Expr5> KwIs <rhs:Expr4> <end:@R> => {
        ExpressionLike::Is(IsExpr {
            lhs: Box::new(lhs),
            rhs: Box::new(rhs),
            span: InputSpan { file, start, end },
        })
    },
};

Expr4 = LeftAssocBinaryOpExprTier<Expr4Op, Expr3>;
Expr4Op: BinaryOperator = {
    "<" => BinaryOperator::Less,
    ">" => BinaryOperator::Greater,
    "<=" => BinaryOperator::LessEq,
    ">=" => BinaryOperator::GreaterEq,
}

Expr3 = LeftAssocBinaryOpExprTier<Expr3Op, Expr2>;
Expr3Op: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
}

Expr2 = LeftAssocBinaryOpExprTier<Expr2Op, Expr1>;
Expr2Op: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
    "%" => BinaryOperator::Mod,
}

Expr1: ExpressionLike = {
    AddressExpr,
    DerefExpr,
    UnaryOpExpr,
    Expr0,
};

AddressExpr: ExpressionLike = {
    <start:@L> "&" <target:Expr1> <end:@R> => {
        ExpressionLike::Address(AddressExpr {
            target: Box::new(target),
            span: InputSpan { file, start, end },
        })
    },
};

DerefExpr: ExpressionLike = {
    <start:@L> "*" <pointer:Expr1> <end:@R> => {
        ExpressionLike::Deref(DerefExpr {
            pointer: Box::new(pointer),
            span: InputSpan { file, start, end },
        })
    },
};

UnaryOpExpr: ExpressionLike = {
    <start:@L> <operator:UnaryOp> <operand:Expr1> <end:@R> => {
        ExpressionLike::UnaryOp(UnaryOperatorExpr {
            operator,
            operand: Box::new(operand),
            span: InputSpan { file, start, end },
        })
    },
};

UnaryOp: UnaryOperator = {
    "!" => UnaryOperator::LogicalNot,
};

Expr0: ExpressionLike = {
    VariableExpr,
    IntLiteralExpr,
    BoolLiteralExpr,
    CharLiteralExpr,
    StringLiteralExpr,
    NullExpr,
    SelfExpr,
    ArrayFromElementsExpr,
    ArrayFromCopyExpr,
    IndexExpr,
    CallExpr,
    FieldAccessExpr,
    MethodCallExpr,
    ParensExpr,
};

VariableExpr: ExpressionLike = {
    <start: @L> <name:Ident> <end: @R> => {
        ExpressionLike::Variable(VariableExpr {
            name,
            span: InputSpan { file, start, end },
        })
    },
};

IntLiteralExpr: ExpressionLike = {
    <start: @L> <value:IntLiteral> <end: @R> => {
        ExpressionLike::IntLiteral(IntLiteralExpr {
            value,
            span: InputSpan { file, start, end },
        })
    },
};

BoolLiteralExpr: ExpressionLike = {
    <start: @L> <value:BoolLiteral> <end: @R> => {
        ExpressionLike::BoolLiteral(BoolLiteralExpr {
            value,
            span: InputSpan { file, start, end },
        })
    },
};

CharLiteralExpr: ExpressionLike = {
    <start:@L> <value:CharLiteral> <end:@R> => {
        ExpressionLike::CharLiteral(CharLiteralExpr {
            value,
            span: InputSpan { file, start, end },
        })
    },
};

StringLiteralExpr: ExpressionLike = {
    <start:@L> <value:StringLiteral> <end:@R> => {
        ExpressionLike::StringLiteral(StringLiteralExpr {
            value,
            span: InputSpan { file, start, end },
        })
    },
};

NullExpr: ExpressionLike = {
    <start:@L> KwNull <end:@R> => {
        ExpressionLike::Null(NullExpr {
            span: InputSpan { file, start, end },
        })
    },
};

SelfExpr: ExpressionLike = {
    <start:@L> KwSelf <end:@R> => {
        ExpressionLike::Self_(SelfExpr {
            span: InputSpan { file, start, end },
        })
    },
};

ArrayFromElementsExpr: ExpressionLike = {
    <start:@L> "[" <elements:CommaSeparated<Expr>> "]" <end:@R> => {
        ExpressionLike::ArrayFromElements(ArrayFromElementsExpr {
            elements,
            span: InputSpan { file, start, end },
        })
    },
};

ArrayFromCopyExpr: ExpressionLike = {
    <start:@L> "[" <element:Expr> ";" <size:Expr> "]" <end:@R> => {
        ExpressionLike::ArrayFromCopy(ArrayFromCopyExpr {
            element: Box::new(element),
            size: Box::new(size),
            span: InputSpan { file, start, end },
        })
    },
};

IndexExpr: ExpressionLike = {
    <start:@L> <collection:Expr0> "[" <index:Expr> "]" <end:@R> => {
        ExpressionLike::Index(IndexExpr {
            collection: Box::new(collection),
            index: Box::new(index),
            span: InputSpan { file, start, end },
        })
    },
};

CallExpr: ExpressionLike = {
    <start: @L> <function_name:Ident> "(" <arguments:CommaSeparated<Expr>> ")" <end: @R> => {
        ExpressionLike::Call(CallExpr {
            function_name,
            arguments,
            span: InputSpan { file, start, end },
        })
    },
};

FieldAccessExpr: ExpressionLike = {
    <start:@L> <receiver:Expr0> "." <field:Ident> <end:@R> => {
        ExpressionLike::FieldAccess(FieldAccessExpr {
            receiver: Box::new(receiver),
            field,
            span: InputSpan { file, start, end },
        })
    },
};

MethodCallExpr: ExpressionLike = {
    <start:@L> <receiver:Expr0> "." <method:Ident> "(" <arguments:CommaSeparated<Expr>> ")" <end:@R> => {
        ExpressionLike::MethodCall(MethodCallExpr {
            receiver: Box::new(receiver),
            method,
            arguments,
            span: InputSpan { file, start, end },
        })
    },
};

ParensExpr: ExpressionLike = {
    <start: @L> "(" <e:Expr> ")" <end: @R> => {
        e.map_span(|_| InputSpan { file, start, end })
    },
};

Block: BlockExpr = {
    <start: @L> "{" "}" <end: @R> => {
        BlockExpr {
            statements: vec![],
            final_expr: None,
            span: InputSpan { file, start, end },
        }
    },

    <start: @L> "{" <statements:(<Stmt>)*> <final_stmt:StmtNotExpr> "}" <end: @R> => {
        let mut statements = statements;
        statements.push(final_stmt);
        BlockExpr {
            statements,
            final_expr: None,
            span: InputSpan { file, start, end },
        }
    },

    <start: @L> "{" <statements:(<Stmt>)*> <final_expr:Expr> "}" <end: @R> => {
        BlockExpr {
            statements,
            final_expr: Some(Box::new(final_expr)),
            span: InputSpan { file, start, end },
        }
    },
};

TypeExpr: TypeExpr = {
    ScalarTypeExpr,
    ArrayTypeExpr,
    PointerTypeExpr,
    TemplateInstanceTypeExpr,
};

ScalarTypeExpr: TypeExpr = {
    <start:@L> <name:Ident> <end:@R> => {
        TypeExpr::Scalar(ScalarTypeExpr {
            name,
            span: InputSpan { file, start, end },
        })
    },
};

ArrayTypeExpr: TypeExpr = {
    <start:@L> "[" <element:TypeExpr> "]" <end:@R> => {
        TypeExpr::Array(ArrayTypeExpr {
            element: Box::new(element),
            span: InputSpan { file, start, end },
        })
    },
};

PointerTypeExpr: TypeExpr = {
    <start:@L> "&" <target:TypeExpr> <end:@R> => {
        TypeExpr::Pointer(PointerTypeExpr {
            target: Box::new(target),
            span: InputSpan { file, start, end },
        })
    },
};

TemplateInstanceTypeExpr: TypeExpr = {
    <start:@L> <template:Ident> "<" <type_arguments:CommaSeparated<TypeExpr>> ">" <end:@R> => {
        TypeExpr::TemplateInstance(TemplateInstanceTypeExpr {
            template,
            type_arguments,
            span: InputSpan { file, start, end },
        })
    },
};

Ident: Identifier = {
    <start: @L> <text:r"[_a-zA-Z][_a-zA-Z0-9]*"> <end: @R> => Identifier {
        text: String::from(text),
        span: InputSpan { file, start, end },
    }
};

IntLiteral: i32 = {
    r"-?[0-9]+" => <>.parse().unwrap(),
};

BoolLiteral: bool = {
    KwTrue => true,
    KwFalse => false,
}

CharLiteral: String = {
    <literal:r#"'([^'\\\n\r\t]|\\.)*'"#> => String::from(&literal[1..literal.len()-1]),
};

StringLiteral: String = {
    <literal:r#""([^"\\\n\r\t]|\\.)*""#> => String::from(&literal[1..literal.len()-1]),
};

// Keywords:
KwVar: () = { "var" }
KwRead: () = { "read" }
KwReadLn: () = { "readln" }
KwWrite: () = { "write" }
KwWriteLn: () = { "writeln" }
KwIf: () = { "if" }
KwElse: () = { "else" }
KwWhile: () = { "while" }
KwFun: () = { "fun" }
KwTrue: () = { "true" }
KwFalse: () = { "false" }
KwStruct: () = { "struct" }
KwSelf: () = { "self" }
KwNew: () = { "new" }
KwIs: () = { "is" }
KwNull: () = { "null" }
KwReturn: () = { "return" }
KwTrait: () = { "trait" }

// Macros:
CommaSeparatedNotEmpty<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

CommaSeparated<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

LeftAssocBinaryOpExprTier<Ops, PrevTier>: ExpressionLike = {
    <start: @L> <lhs:LeftAssocBinaryOpExprTier<Ops, PrevTier>> <operator:Ops> <rhs:PrevTier> <end: @R> => {
        ExpressionLike::BinaryOp(BinaryOperatorExpr {
            operator,
            lhs: Box::new(lhs),
            rhs: Box::new(rhs),
            span: InputSpan { file, start, end },
        })
    },
    PrevTier,
}

// Lexer:

match {
    // Ignore line comments.
    r"//[^\n\r]*[\n\r]*" => { },
} else {
    // Ignore whitespace.
    r"\s*" => { },
    _ // Everything else
}
